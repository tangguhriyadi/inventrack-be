// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
   provider        = "prisma-client-js"
   previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STAFF
}

enum Gender {
  MALE
  FEMALE
}

enum ActionLog {
  CREATE
  UPDATE
  DELETE
  BOOK
  APPROVE
  REJECT
  LOGIN
  LOGOUT
  RETURN
}

enum InventoryCondition {
  NEW
  GOOD
  WORN
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  RETURNED
}

model User {
  id                  String    @id @default(uuid())
  name                String    
  email               String    
  password            String?    
  gender              Gender    @default(MALE)
  role                Role      @default(STAFF)
  

  is_deleted          Boolean   @db.Boolean() @default(false)
  deleted_by          String?
  deleted_at          DateTime?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

   // inventory
  inventoryCreated    Inventory[] @relation(name: "InventoryCreatedBy")
  inventoryUpdated    Inventory[] @relation(name: "InventoryUpdatedBy")
  inventoryDeleted    Inventory[] @relation(name: "InventoryDeletedBy")

   // inventory cateogry
  inventoryCategoryCreated    InventoryCategory[] @relation(name: "InventoryCategoryCreatedBy")
  inventoryCategoryUpdated    InventoryCategory[] @relation(name: "InventoryCategoryUpdatedBy")
  inventoryCategoryDeleted    InventoryCategory[] @relation(name: "InventoryCategoryDeletedBy")

  // booking
  booking           Booking[] @relation(name: "BookingUser")
  bookingApproved   Booking[] @relation(name: "BookingApprovedBy")
  bookingRejected   Booking[] @relation(name:"BookingRejectedBy")

  // notif
  notification       Notification[]

  @@map("user")
  @@unique([id])
}

model UserLogs {
  id                  String    @id @default(uuid())
  user_id             String
  user_name           String
  action              ActionLog
  created_at          DateTime  @default(now())
  inventory           String?  
  inventory_id        String?

  @@map("user_logs")
  @@unique([id])
}

model Inventory {
  id                  String    @id @default(uuid())
  name                String
  is_available        Boolean   @db.Boolean() @default(true)
  condition           InventoryCondition @default(NEW)
  image_url           String
  category_id         String
  quantity            Int @default(0)


  is_deleted          Boolean @db.Boolean() @default(false)
  created_by          String
  updated_by          String?
  deleted_by          String?
  deleted_at          DateTime?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  // category
  inventoryCategory   InventoryCategory @relation(fields: [category_id], references: [id])

  // users
  createdBy           User   @relation(fields: [created_by], references: [id], name: "InventoryCreatedBy")
  updatedBy           User?  @relation(fields: [updated_by], references: [id], name: "InventoryUpdatedBy")
  deletedBy           User?  @relation(fields: [deleted_by], references: [id], name: "InventoryDeletedBy")

  // inventory item
  // inventoryItems      InventoryItem[]

  // booking
  // bookingInventory    BookingInventory[]

  notification        Notification[]

  booking           Booking[]

  @@map("inventory")
  @@unique([id])
}


model InventoryCategory {
  id                  String    @id @default(uuid())
  name                String

  is_deleted          Boolean @db.Boolean() @default(false)
  created_by          String
  updated_by          String?
  deleted_by          String?
  deleted_at          DateTime?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt

  // inventory
  inventories         Inventory[]

   // users
  createdBy           User   @relation(fields: [created_by], references: [id], name: "InventoryCategoryCreatedBy")
  updatedBy           User?  @relation(fields: [updated_by], references: [id], name: "InventoryCategoryUpdatedBy")
  deletedBy           User?  @relation(fields: [deleted_by], references: [id], name: "InventoryCategoryDeletedBy")

  @@map("inventory_category")
  @@unique([id])
}

model Booking {
  id                  String    @id @default(uuid())
  user_id             String
  inventory_id        String
  booking_at          DateTime  @default(now())
  plan_return_at      DateTime
  created_at          DateTime  @default(now()) 
  is_done             Boolean   @db.Boolean() @default(false)
  is_approved         Boolean   @db.Boolean() @default(false)
  is_rejected         Boolean   @db.Boolean() @default(false)
  is_returned         Boolean   @db.Boolean() @default(false)
  reject_reason       String?

  approved_at         DateTime?
  rejected_at         DateTime?
  returned_at         DateTime?

  approved_by         String?
  rejected_by         String?

  status              BookingStatus @default(PENDING)

  // user
  user                 User @relation(fields: [user_id], references: [id], name: "BookingUser")
  approvedby           User? @relation(fields: [approved_by], references: [id], name: "BookingApprovedBy")
  rejectedby           User? @relation(fields: [rejected_by], references: [id], name: "BookingRejectedBy")

  // bookingInventory    BookingInventory[]

  inventory           Inventory @relation(fields: [inventory_id], references: [id])

  notification        Notification[]


  @@map("booking")
  @@unique([id])
}


model Notification {
  id                  String    @id @default(uuid())
  user_id             String
  booking_id          String
  inventory_id        String
  message             String
  action              ActionLog
  is_read             Boolean   @db.Boolean() @default(false)
  created_at          DateTime  @default(now())

  user                User    @relation(fields: [user_id], references: [id])
  booking             Booking @relation(fields: [booking_id], references: [id])
  inventory           Inventory @relation(fields: [inventory_id], references: [id])

  @@map("notification")
  @@unique([id])
}